1.добавить в html
<head >
 <link rel="stylesheet" type="text/css" href="style.css">
--------------------------------------------------------------------

2.размер шрифта
 <p style="font-size: 12px;">mini текст</p>
--------------------------------------------------------------------

3.
<div style= "font-size: 20px; border: solid 1px;">
    У блока появится рамка шириной 1 пиксель
    <p style="font-size: 10px;">А у параграфа отдельной рамки не будет.  Размер шрифта  параграфа 10пх</p>
</div>
--------------------------------------------------------------------

4.отделяем стиль
<style>
  div {font-size: 20px;}
  p {font-size: 10px;}
</style>
<div>
  Этот текст будет с размером шрифта 20 пикселей
  <p>Вложенный параграф будет иметь размер шрифта 10 пикселей</p>
</div>
--------------------------------------------------------------------

5.Базовые стили 
<style>
  h1 {font-size: 20px;}
</style> 
<h1>Zagolovok 20 пикселей</h1> 
--------------------------------------------------------------------

6.Классы
// HTML
<p class="paragraph">Текст нашего параграфа. Именно с помощью класса paragraph в CSS будут устанавливаться свойства для этого блока текста</p>
/* CSS */
.paragraph {
  color: #333333;
  /* Правило color устанавливает цвет текста. В данном случае — это серый цвет со значением #333333 */
}
============
.news { color: #553333; }
<p class="news">Текст нашего параграфа. цвет текста #553333</p>
============
<style>
    .news { color: #553333; }
</style>    
<p class="news">Текст нашего параграфа. цвет текста #553333</p>
--------------------------------------------------------------------

7.Селекторы
<style>
 .text-bold { font-weight: bold; color: #441188;}
  h1 {  font-size: 50px; }  
  #red {  color: red; }
</style>
<p class="text-bold">Жирный текст внутри параграфа</p>
<div class="text-bold">Ещё один текст внутри простого блочного элемента. Так как у него тоже есть класс text-bold, то он будет с жирным начертанием
    <p>div paragraf</p>
    <p id="red">div Красный параграф</p>
</div>
<h1 class="text-bold">Заголовок/h1>
=============
<style>
  #red {  color: red; }
  .bold {  font-weight: bold; }
</style>
<p id="red" class="bold">Красный   параграф & Tолстый параграф</p>
--------------------------------------------------------------------
--------------------------------------------------------------------

8.Цвета
белый обозначается #ffffff, а чёрный #000000.
https://htmlcolorcodes.com/
===========
<style>
  .violet {  color: #9400D3; }
</style>
<p><span class="violet">violet</span> параграф</p>
--------------------------------------------------------------------

9.Выравнивание текста
.left {  text-align: left;}
.center {  text-align: center;}
.right {  text-align: right;}
<p class="left">Текст по левому краю</p>
===========
<style>
  .important {   text-align: center; }
</style>
<p class="important">center параграф</p>
--------------------------------------------------------------------

10.Размер шрифта
.warning {  font-size: 24px;}
=========
<style>
  .big {  font-size: 60px; }
</style>
<p class="big">big параграф</p>
--------------------------------------------------------------------

11.Насыщенность шрифта
.bold {  font-weight: bold;}
400 — normal
700 — bold
значения свойства font-weight могут использоваться 100, 200, 300, 400, 500, 600, 700, 800, 900
для большинства стандартных шрифтов значения от 100 до 500 будут приравнены к normal, а от 600 до 900 к bold.
==========
<style>
  .weight {  font-weight: bold; }
</style>
<p class="weight">weight-bold параграф</p>
--------------------------------------------------------------------

12.Курсив
.italic {  font-style: italic;}
normal — обычный вывод текста.
italic — курсивное начертание
oblique — косое начертание
=========
<style>
  .italic-type {  font-style: oblique; }
</style>
<p class="italic-type">italic-type параграф</p>
--------------------------------------------------------------------

13.Капитель— вид строчных букв, размер которых совпадает c размером заглавных букв
font-variant
normal — нормальное написание текста
small-caps — капитель
==========
<style>
  .small-capitals {  font-variant: small-caps ; }
</style>
<p class="small-capitals">small-caps  параграф</p>
--------------------------------------------------------------------

14.Горизонтальная черта
text-decoration
underline — Подчёркивание текста
line-through — Перечёркивание текста
overline — Надчёркивание текста
отменить подчёркивание у ссылок используется значение text-decoration: none;
==========
<style>
  .line{  text-decoration: underline  ; }
</style>
<p class="line">Подчёркивание текста</p>
--------------------------------------------------------------------

15.Межстрочный интервал
line-height
==========
<style>
  .line-height {  font-size:24px; line-height:36px;}
</style>
<p class="line-height">Строка 1</p>
<p class="line-height">Строка 2</p>
--------------------------------------------------------------------

16.Шрифт
указать шрифт, используется правило font-family,
<style>
  .new-font {
    font-family: Arial, Futura;
  }
</style>
<p class="new-font">Абзац</p>
Наиболее распространёнными шрифтами являются:
* Times New Roman
* Arial
* Tahoma
* Verdana
* Courier New
==========
<style>
  .verdana-text {
    font-family: Verdana, sans-serif;
  }
</style>
<p class="verdana-text">Текст со шрифтом Verdana</p>
--------------------------------------------------------------------

17.Обобщённое правило для шрифтов
Удобно задать свойства для шрифта font, которое позволяет указать:
font-style
font-variant
font-weight
font-size / line-height (эти два правила записываются через слэш)
font-family
Шесть разных правил внутри одного!  Обязательныe font-size и font-family.
!! Обратите внимание на порядок использования значений внутри свойства font
==========
<style>
  .bold-text {
    font: bold 24px Verdana, sans-serif;;
  }
</style>
<p class="bold-text">Жирный текст 24 со шрифтом Verdana</p>
--------------------------------------------------------------------

18.Базовые правила типографики
-Используйте стандартные шрифты
-Используйте не больше двух шрифтов на странице(одного шрифта для заголовков и другого для текста)
-Используйте достаточный размер шрифта(не следует использовать основной текст со шрифтом меньше 14 пикселей)
-Используйте достаточный межстрочный интервал(150% от шрифта. Если текст 14 пикселей, то не менее 21 .)
-Выравнивайте текст по левому краю-
==========
no
--------------------------------------------------------------------

19.Рамки
border «рисует» вокруг блока границу с заданным цветом. Для этого 3 значения:
ширина границы;
тип границы;
цвет границы.
solid (сплошная)
dotted (пунктирная)
dashed (штриховая)
----
<style>
  .border-dotted {
    border: 1px dotted #000;
  }
</style>
<div class="border-dotted">
    Блок с пунктирной рамкой и чёрным цветом
</div>
==========
<style>
  .border-bold {
    border: 5px solid #2196F3;
  }
</style>
<div class="border-bold">
    Блок с рамкой и цветом
</div>
--------------------------------------------------------------------

20.Фон
background-color
==========
<style>
  .background {
    background-color: #2196f3;
  }
</style>
<div class="background">Блок с фоновым цветом #2196f3</div>
--------------------------------------------------------------------

21.Внутренние отступы
padding
==========
<style>
  .padding{
    background-color: green;
    padding: 10px 20px 15px 20px;
  }
</style>
<div class="padding">Блок с внутренними отступами</div>
--------------------------------------------------------------------

22.Внешние отступы
margin
Если указать два значения, то первое для отступов по вертикали (сверху и снизу), а второе по горизонтали).
Если указать только одно значение, то оно будет одновременно для всех сторон.
==========
<style>
  .margin {
    background-color: #ededed;
    margin: 20px;
  }
</style>
<div class="margin">Блок с отступами 20</div>
--------------------------------------------------------------------

23.Высота и ширина блока
width и height,
==========
<style>
  .rectangle {
    width: 300px;
    height: 100px;
    background-color: #000000;
  }
</style>
<div class="rectangle"></div>
--------------------------------------------------------------------

24.Блочная модель
снаружи-margin, внутри border, внутри padding, внутри content
==========
<style>
  .card-hello  {
    background-color: #FA7268;
    color: #FFFFFF;
    width: 230px;
    height: 25px;
    padding: 20px;
    margin: 10px;
    border: 2px solid #9C27B0;
    font-size: 20px;  
  }
</style>
<div class="card-hello "> crazy style </div>
--------------------------------------------------------------------

25.Каскадность
Например, вот такой блок:
<p class="card" style="background-color: #9c27b0;"></p>
будет использовать стили сразу из трёх источников:
-Стили браузера по умолчанию (у тега p по умолчанию есть отступы).
-Стили, указанные у класса card.
-Стили, указанные в атрибуте style.
==========
<style>
  .cascade {
    font-size: 25px;
  }
  p {
    padding: 15px;
  }
</style>
<p class="cascade">Параграф с внутренними отступами в 15 пикселей и размером шрифта 25 пикселей</p>
--------------------------------------------------------------------

26.Приоритет стилей
1  в разных источниках приоритеты 
Стили в атрибуте тега
Стили в отдельном файле
Стили по умолчанию, которые добавляет браузер
2 У селекторов приоритеты:
Селектор по тегу: 1
Селектор по классу: 10
Селектор по ID: 100
Стиль в атрибуте тега: 1000
==========
<style>
  .border {
    border: 1px solid #552292;
  }
  #no-border {
    border-style: none;
  }
</style>
<p class="border" id="no-border">рамка не рамка`с</p>
--------------------------------------------------------------------

27.Префиксы
префиксы — небольшие дополнения для правил,
==========
Если при использовании box-shadow необходима поддержка старых браузеров, то запись принимает следующий вид:
.block-shadow {
  -webkit-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
  -moz-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
  box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
}
--------------------------------------------------------------------

28. Единицы измерения
px, %,
em. Похожи на процент, только указывают, на сколько больше должно быть значение.
rem. Считаются относительно не родительского блока, а значения, указанного у тега html.
==========
<style>
  .header {
    font-size: 22px;
    /* Здесь значение указано абсолютное и всегда будет равняться 22 пикселям */
  }
   .offer {
    font-size: 200%;
    /* Относительное значение. высчитывается от значения в классе. При изменении значения в классе i  будет пересчитано автоматически */
  }
</style>

<div class="header">
    Здесь текст
    <p class="offer">Здесь большой текст</p>
</div>
--------------------------------------------------------------------

29. Цветовые модели
rgb(r, g, b). пропорции цветов от 0 до 255, 0—отсутствие, 255—макс. белый rgb(255, 255, 255), а чёрный rgb(0, 0, 0):
возможно добавить степень прозрачности:
color: rgba(255, 255, 255, 0.5) // Полупрозрачный белый цвет, 1-непрозрачный
color: #FFFFFF; // Белый цвет
color: #000000; // Чёрный цвет
==========
<style>
  .background-black-50 {
    background-color: rgba(0, 0, 0, 0.5);
  }
</style>
<p class="background-black-50">Параграф с полупрозрачным чёрным фоном</p>
--------------------------------------------------------------------

30. Медиа запросы
iспользуем условие max-width, чтобы определить, до какого значения ширины использовать правила:
@media (max-width: 1000px) {
  body {
    background-color: blue;
  }
}
// На устройствах, с шириной экрана до 1000 пикселей цвет фона у тега body будет голубым.
Полезно также orientation. (portrait) ориентации (когда просто телефон в руках) блоки всю ширину экрана. 
В альбомной (landscape) (когда переворачиваем телефон) по 2 блока в одной строке:
@media (orientation: landscape) {
  .blocks {
    // Правила для блоков
  }
}

@media (orientation: portrait) {
  .blocks {
    // Правила для блоков
  }
}
https://www.w3.org/TR/css3-mediaqueries/
==========
<style>
  @media (max-width: 750px) {
    .white-text-mobile {
      color: #fff;
    }
  }
</style>
<p class="white-text-mobile">Если зайти с телефона, то на альбомой ориентации текст будет белый</p>
--------------------------------------------------------------------

31. Анимация
@keyframes и название анимации:

==========
<style>
    @keyframes color-change {
      0% {
        color: blue;
      }
      50% {
        color: red;
      }
      100% {
        color: blue;
      }
    }
     .black-white {
         animation: color-change 3s infinite;
    }      
</style>
<p class="black-white">Текст с анимацией color-change. Цвет текста меняется с голубого на красный и обратно</p>
--------------------------------------------------------------------

32. Переменные
Переменная создаётся с помощью конструкции --имя-переменной. их необходимо указывать у конкретного тега
.news-block { или глобально :root {
--main-color: #000000; }
==========
<style>
    :root {
      --main-blue: #00bfff; }
    .p-color { color: var(--main-blue); }  
</style>
<p class="p-color">значением голубой цвет #00bfff</p>
--------------------------------------------------------------------

33. Позиционирование
position
-relative (относительное позиционирование). расположение элемента относительно, где он был расположен до применения. 
 место на странице, которое блок занимал ранее, останется. То есть другие блоки не будут вставать на место, до применения position.
-absolute (абсолютное позиционирование). «Вынимает» блок из HTML вёрстки и изменяет его относительно левого верхнего
угла cтраницы (или родительского элемента, 
- sticky ? 
-fixed. Также, как и absolute, 
--top, right, left и bottom, 
-------
<style>
  .absolute-position {
    position: absolute;
    top: 100px;
    left: 100px;
  }
</style>
 <div class="absolute-position">Блок с абсолютным позиционированием, страницы</div>
==========
<style>
  .relative-position {
    position: relative;
    top: 100px;
    right: 50px;
  }
</style>
<div class="relative-position ">Блок с позиционированием, будет расположен</div>
--------------------------------------------------------------------



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




====================================================================
изображения
max-width — максимальная ширина элемента. Указав значение в 100%, вы запретите элементу занимать ширину больше своего родителя.
height — высота. Часто выставляют значение auto. Это позволит сохранить правильные пропорции.
---
img {
  max-width: 100%;
  height: auto; }
---------
небольшой отступ между картинкой и нижней границей блока. 
vertical-align,  По умолчанию оно имеет значение baseline. 
достаточно указать middle для свойства vertical-align у изображения.
---
img {
  max-width: 100%;
  height: auto;

  vertical-align: middle;
}
---------------------
Для указания нескольких вариантов изображения используется тег <picture>
---
Внутри <picture>тег <img>. Это основное изображение, если другие варианты не подходят.
В  теге <source> лежат другие варианты изображений. 
<picture>
    <source media="(min-width: 1024px)" srcset="https://www.fillmurray.com/1280/500">
    <source media="(min-width: 700px)" srcset="https://www.fillmurray.com/700/360">

    <img src="https://www.fillmurray.com/500/360" alt="Bill Murray">
  </picture>

====================================================================
Таблицы
Лучший вариант — использование CSS. Так все стили в одном месте, и не будет нужды вспоминать об атрибутах.
---
table,
tr,
td {
  border: 1px solid #000;
}
--------
Для выравнивания по вертикали используется свойство vertical-align
-baseline — выравнивание по базовой линии шрифта. 
-top —  по верхнему краю ячейки.
-middle —  по центру. Стандартное поведение для контента внутри ячеек.
-bottom —  по нижнему краю ячейки.
---
.vertical-top {
  vertical-align: top;
---------------
надо делать все в разных тегах, чтобы понимать потом(caption, thead, tbody, top и тд)

<table>
  <caption>Профессии</caption>
  <thead>
    <tr>
      <th>№</th>
      <th>Название профессии</th>
      <th>Описание</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Фронтенд-программист</td>
      <td>JavaScript — язык программирования фронтенд-разработки. С его помощью программисты делают сайты динамичными и «живыми». Самый востребованный и наиболее простой язык для новичков.</td>
    </tr>
  </tbody>
</table>
-----------
colspan — объединение столбцов.
rowspan — объединения строк.
<td colspan="3"> — ячейка должна занять пространство трёх столбцов.
====================================================================
Колонки

<article class="columns-2">
  <p>David Bowie,  was not eclectic—he admired Anthony Newley and Jacques Brel and studied mime with Lindsay Kemp).</p>
</article>
----
.columns-2 {
 
 количество 
  column-count: 2;
 
 отступы между колонками можно с помощью свойства column-gap
  column-gap: 30px;
 
 оптимальная ширина 
  column-width: 250px;
---
границы  column-rule, которое является краткой записью следующих свойств:
   column-rule-width — ширина границы.
   column-rule-style — тип границы. Значения совпадают со значениями свойства border.
   column-rule-color — цвет границы.
  column-rule: 2px solid black;
  column-width: 250px;
---
Для разделения колонок  column-span:
none — значение по-умолчанию. Текст находится просто внутри колонок.
all — текст «выходит из колонки» и разделяет их.
h2 {
  text-align: center;
  column-span: all;
---
Перенос колонок
 break-before
 break-after
 break-inside
avoid, которое запрещает перенос.
figure {
  border: 1px solid;
  break-inside: avoid;
---


--------------------------------------------------------------------
--------------------------------------------------------------------

красивые заглавные буквы
--------------------------------------------------------------------
<!DOCTYPE HTML>
<html>
 <head>
  <meta charset="utf-8">
  <title>Тег SPAN</title>
  <style>
    body { 
     font-family: Arial, sans-serif; /* Рубленый шрифт */ 
    }
    .letter { 
     color: red; /* Красный цвет символов */ 
     font-size: 200%; /* Размер шрифта в процентах */ 
     font-family: serif; /* Шрифт с засечками */ 
     position: relative; /* Относительное позиционирование */ 
     top: 5px; /* Сдвиг сверху */ 
    }
  </style> 
 </head>
 <body>

  <p><span class="letter">Р</span>азумные люди приспосабливаются к окружающему миру. 
  Неразумные люди приспосабливают мир к себе. Вот почему прогресс определяется 
  действиями неразумных людей.</p> 
  <p>Бернард Шоу</p>
 
 </body>
</html>


