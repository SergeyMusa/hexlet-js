result *= counter;    // то же, что result = result * counter
result += counter;    // то же, что result = result + counter
result -= counter;    // то же, что result = result - counter
result %= counter;    // то же, что result = result % counter
b = a++;    // b = 3, a = 4 / x += 1; // x = x + 1;
b = ++a;    // b = 4, a = 4
 ---------------------цикл-1----------------------------------
 for (let counter = 1; counter <= n; counter++) {
    result *= counter;
  }
  --------------------цикл-2----------------------------------
    for (let counter = 1; counter <= n; counter++) {
    result *= counter;
  }
  -----------------------------------------------------------
switch(num) {
  case 1:  // if (num === 1)
    answer = "One";
    break;

  case 2:  // if (num === 2)
  case 3:  // if (num === 3)
  case 4:  // if (num === 4)
    answer = "Two to four";
    break;

  default:
    answer = "Nothing";
    break;
}
----------------------------------------------------------------
1.
2.
3.
---------------------------------------------------------------------------
4. библиотеки
популярна библиотека lodash.
// Так будет происходить поиск файла lodash.js в текущей директории
import _ from "./lodash";

// Так импортируется код из пакета
import _ from "lodash";
---
# Обязательно выполнять в корне проекта
# только тогда lodash будет лежать в правильном месте
$ npm install lodash

# Если мы хотим в точности те же версии всех пакетов,
# какие были у остальных разработчиков этого проекта
$ npm ci

# Выполняется в корне проекта
# Устанавливает все указанные зависимости
$ npm install

<script src="https://cdn.jsdelivr.net/lodash/4.10.0/lodash.js"></script>

---------------------------------------------------------------------------
5.Зависимости
// Пример встроенной функции
Math.round(5.34); // 5

// Встроенный в Node.js модуль для работы с файлами
import fs from "fs";

// Читает содержимое файла
const data = fs.readFileSync("path/to/file");
-----------
# Обязательно выполнять в корне проекта
# только тогда lodash будет лежать в правильном месте
$ npm install lodash
--------
// По общепринятому соглашению, lodash импортируется под именем _
import _ from "lodash";

// Пересечение массивов
_.intersection([2, 1], [2, 3]); // => [2]

// capitalize делает первую букву заглавной
_.capitalize("hello"); // Hello
-----------
hexlet-js$ tree -L 1
-----------
Зависимости в package.json добавляются под ключом dependencies. Здесь указаны все пакеты, используемые в проекте и не входящие в стандартную библиотеку.
--------------
# Если мы хотим в точности те же версии всех пакетов,
# какие были у остальных разработчиков этого проекта
$ npm ci

---------------------------------------------------------------------------


6.Зависимости для разработки
# jest – тестовый фреймворк,
# с помощью которого пишутся автоматизированные тесты кода
$ npm install --save-dev jest

# Вот теперь зависимости из devDependencies устанавливаться не будут
$ npm install --production

# Продакшен режим можно задать и с помощью переменной окружения
$ NODE_ENV=production npm install
=============
git clone https://github.com/hexlet-boilerplates/nodejs-package


devDependencies — пакеты, которые нужны для разработки. Всякие галпы-гранты и плагины к ним обычно подпадают в эту категорию.
dependencies — пакеты, от которых ваш пакет зависит непосредственно: как правило — библиотеки.
Ставятся они все в node_modules.
Тут подробнее: https://toster.ru/answer?answer_id=559717#comments...

Если кто-то делает npm install вашему пакету, то npm подсосет те пакеты, которые указаны у него в dependencies, но не в devDependencies.
Если сделать npm install внутри папки, в которой есть package.json, то установятся и те, и другие.
---------
станавливались с ключом --save-dev (надпись devDependencies), а пакет gulp-jade устанавливался с ключом --save (надпись dependencies).
---------------------------------------------------------------------------
7.Глобальная установка пакетов
# В зависимости от способа установки Node.js
# может понадобиться sudo в начале команды
$ npm install -g sloc
$ npm config ls -l
==========
npm install hexo-cli -g
hexo init blog
cd blog
npm install
hexo server
---------------------------------------------------------------------------
8.NPX
prettier - код по общепринятым правилам
https://prettier.io/playground/
prettier --check index.js

npm (менеджер пакетов Node) - это менеджер зависимостей / пакетов, который вы получаете из коробки при установке Node.js
npm - это пара вещей. Прежде всего, это онлайн-репозиторий для публикации проектов
Во-вторых, это инструмент CLI, который помогает вам устанавливать эти пакеты и управлять их версиями и зависимостями
Eсли вы хотите запустить пакет, используя npm, вы должны указать этот пакет в своем файле package.json.
npx также является инструментом CLI, цель которого - упростить установку и управление зависимостями, размещенными в реестре npm.
npx помогает нам избежать версий, проблем с зависимостями и установки ненужных пакетов, которые мы просто хотим попробовать.

---------------------------------------------------------------------------
9.Линтинг– это стиль написания
prettier не достаточно, он не изменит ===
https://eslint.org
npm install --save-dev eslint
https://eslint.org/docs/rules/quotes
=====
npx eslint .
npx eslint --fix .

---------------------------------------------------------------------------
14.Тесты и автоматическая проверка кода
assert - проверка кода логическая -это библиотека тестирования для JavaScript
assert(square(2) === 4);
Если функция square верна в случае с 2, то она возвратит 4, а раз 4 равно 4, assert не пожалуется. тест -пройден.
--
assert(square(6) !== 4);
assert.equal(square(2), 4);

---------------------------------------------------------------------------
15. Модули - импорт/экспорт
import { surfaceArea, square, pi, e } from './math.js';
--
Или импортировать всё сразу:
import * as mathematics from './math.js'; //"импортировать весь модуль и назвать его "mathematics" 
--
const yearSquared = mathematics.square(2017); // использование
----
экспортированную по умолчанию вещь проще импортировать.
const pi = 3.14;
const square = (x) => {
  return x * x;
};
const surfaceArea = (r) => {
  return 4 * pi * square(r);
};
export default surfaceArea;
Просто напишите код, как обычно, а в конце выполните "export default что-нибудь". 
В данном случае мы экспортируем функцию surfaceArea.
--
import surfaceArea from './math.js';
const surfaceOfMars = surfaceArea(3390);
---
Если импорт from содержит ./, значит находится в текущей файловой системе. 
Если from 'name' только имя, без ./ в начале, значит  подгружается из стандартной библиотеки nodejs, либо из установленных пакетов
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------


